{% extends 'back/dashboard.html.twig' %}

{% block title %}📊 Statistiques dynamiques{% endblock %}

{% block content %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>

<div class="container py-5">
    <h2 class="mb-4">📈 Choisissez une statistique à afficher</h2>

    <div class="mb-4">
        <select id="chartSelector" class="form-select w-50">
            <option value="">-- Sélectionner --</option>
            <option value="stock">📦 Stock par produit</option>
            <option value="fournisseur">🧑‍💼 Par fournisseur</option>
            <option value="prix">💶 Répartition par prix</option>
            <option value="date">📅 Produits par date</option>
        </select>
    </div>
 <div class="mt-4 d-flex justify-content-between">
            <a href="{{ path('app2_produit_index') }}" class="btn btn-secondary">⬅️ Retour</a>
        </div>
    <div style="max-width: 400px; margin: 0 auto;">
        <canvas id="chartCanvas"></canvas>
    </div>
</div>

<script>
    // Données dynamiques transmises depuis le contrôleur Symfony
    const dataSets = {
        stock: {
            type: 'bar',
            data: {
                labels: {{ labels|json_encode|raw }},
                datasets: [{
                    label: 'Stock disponible',
                    data: {{ stock|json_encode|raw }},
                    backgroundColor: 'rgba(54, 162, 235, 0.6)'
                }]
            }
        },
      fournisseur: {
    type: 'doughnut',
    data: {
        labels: {{ fournisseurLabels|json_encode|raw }},
        datasets: [{
            label: 'Produits par fournisseur',
            data: {{ fournisseurValues|json_encode|raw }},
            backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#00cc99', '#9966FF']
        }]
    },
    options: {
        plugins: {
            tooltip: {
                callbacks: {
                    label: function(tooltipItem) {
                        var value = tooltipItem.raw;
                        var total = tooltipItem.dataset.data.reduce(function(acc, curr) {
                            return acc + curr;
                        }, 0);
                        var percentage = Math.round((value / total) * 100);
                        return tooltipItem.label + ': ' + percentage + '%';  // Affichage du pourcentage dans l'infobulle
                    }
                }
            },
            datalabels: {
                formatter: (value, context) => {
                    const total = context.dataset.data.reduce((sum, value) => sum + value, 0);
                    const percentage = ((value / total) * 100).toFixed(1);  // Calcul du pourcentage
                    const label = context.chart.data.labels[context.dataIndex];  // Récupérer le label (fournisseur)
                    return `${label}: ${percentage}%`;  // Afficher le nom du fournisseur et son pourcentage
                },
                color: '#fff',  // Couleur du texte (blanc ici)
                font: {
                    weight: 'bold'
                },
                anchor: 'center',  // Centre le texte sur les segments
                align: 'center'    // Centre le texte à l'intérieur des segments
            }
        }
    }
},

        prix: {
            type: 'pie',
            data: {
                labels: ['< 50€', '≥ 50€'],
                datasets: [{
                    data: [{{ prixUnder }}, {{ prixOver }}],
                    backgroundColor: ['#FF6384', '#36A2EB']
                }]
            },
            options: {
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(tooltipItem) {
                                var value = tooltipItem.raw;
                                var total = tooltipItem.dataset.data.reduce(function(acc, curr) {
                                    return acc + curr;
                                }, 0);
                                var percentage = Math.round((value / total) * 100);
                                return tooltipItem.label + ': ' + percentage + '%';
                            }
                        }
                    },
                    datalabels: {
                        formatter: (value, context) => {
                            const total = context.dataset.data.reduce((sum, value) => sum + value, 0);
                            const percentage = ((value / total) * 100).toFixed(1);  // Calcul du pourcentage
                            return `${percentage}%`;  // Affiche le pourcentage
                        },
                        color: '#fff',  // Couleur du texte (blanc ici)
                        font: {
                            weight: 'bold'
                        },
                        anchor: 'center',  // Centre le texte sur les segments
                        align: 'center'    // Centre le texte à l'intérieur des segments
                    }
                }
            }
        },
        date: {
            type: 'line',
            data: {
                labels: {{ dateLabels|json_encode|raw }},
                datasets: [{
                    label: 'Ajouts par date',
                    data: {{ dateValues|json_encode|raw }},
                    fill: false,
                    borderColor: 'rgb(75, 192, 192)'
                }]
            }
        }
    };

    let chartInstance = null;
    const ctx = document.getElementById('chartCanvas').getContext('2d');
    const selector = document.getElementById('chartSelector');

    // Gestion de la sélection du graphique par l'utilisateur
    selector.addEventListener('change', () => {
        const type = selector.value;

        if (chartInstance) {
            chartInstance.destroy();  // Détruire le graphique précédent
        }

        if (type && dataSets[type]) {
            chartInstance = new Chart(ctx, {
                type: dataSets[type].type,
                data: dataSets[type].data,
                options: dataSets[type].options || {
                    responsive: true,
                    scales: type === 'stock' || type === 'date' ? {
                        y: { beginAtZero: true }
                    } : {}
                }
            });
        }
    });
</script>

{% endblock %}
